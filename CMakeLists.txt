#SPDX-License-Identifier: BSD-3-Clause-No-Nuclear-License-2014
cmake_minimum_required(VERSION 3.23)

set(VCPKG_LIBRARY_LINKAGE static CACHE STRING "Linkage of vcpkg libraries" FORCE)

project(discord-what-qua-bot)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 17)
set(CMAKE_C_STANDARD_REQUIRED ON)

find_package(Opus CONFIG REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(ZLIB REQUIRED)
find_package(nlohmann_json CONFIG REQUIRED)

include_directories(DPP/include)

set(BUILD_SHARED_LIBS OFF CACHE BOOL "Do not build shared libraries" FORCE)
add_subdirectory(DPP)
if (TARGET mlspp)
    link_directories(${CMAKE_BINARY_DIR}/DPP/library/mlspp)
else()
    add_subdirectory(DPP/library/mlspp)
endif()
if (TARGET bytes)
    link_directories(${CMAKE_BINARY_DIR}/DPP/library/mlspp/lib/bytes)
else()
    add_subdirectory(DPP/library/mlspp/lib/bytes)
endif()
if (TARGET hpke)
    link_directories(${CMAKE_BINARY_DIR}/DPP/library/mlspp/lib/hpke)
else()
    add_subdirectory(DPP/library/mlspp/lib/hpke)
endif()
if (TARGET mls_vectors)
link_directories(${CMAKE_BINARY_DIR}/DPP/library/mlspp/lib/mls_vectors)
else()
    add_subdirectory(DPP/library/mlspp/lib/mls_vectors)
endif()
if (TARGET tls_syntax)
    link_directories(${CMAKE_BINARY_DIR}/DPP/library/mlspp/lib/tls_syntax)
else()
    add_subdirectory(DPP/library/mlspp/lib/tls_syntax)
endif()

add_executable(bot src/main.cpp)

target_link_libraries(bot PRIVATE dpp)
