name: Creat Release When Tagged

on:
  push:
    tags:
      - "v**"

jobs:
  create-release-for-x64-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null 
          sudo apt-get update -y 
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install clang cmake ninja-build libstdc++-10-dev lld linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-latest-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=x64-linux-release -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build x64_linux_cmake-release --parallel $(nproc)

      - name: Rename files
        run: |
          mv x64_linux_cmake-release/bot bot-linux-x64
          mv src/what-bot-x64.service what-bot-x64.service
          mv src/install-x64.sh install-x64.sh
          mv src/token.env token.env

      - name: Create arch spicific tarball
        run: |
          tar -czf bot-linux-x64.tar.gz bot-linux-x64 what-bot-x64.service install-x64.sh token.env

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "bot-linux-x64.tar.gz"

      - name: Create release for x64-linux
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          omitBody: true
          artifacts: "bot-linux-x64.tar.gz"

  create-release-for-arm64-linux:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null 
          sudo apt-get update -y 
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install clang cmake ninja-build libstdc++-10-dev lld linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-latest-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=arm64-linux-release -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build arm64_linux_cmake-release --parallel $(nproc)

      - name: Rename files
        run: |
          mv arm64_linux_cmake-release/bot bot-linux-arm64
          mv src/what-bot-arm64.service what-bot-arm64.service
          mv src/install-arm64.sh install-arm64.sh
          mv src/token.env token.env

      - name: Create arch spicific tarball
        run: |
          tar -czf bot-linux-arm64.tar.gz bot-linux-arm64 what-bot-arm64.service install-arm64.sh token.env

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "bot-linux-arm64.tar.gz"

      - name: Create release for arm64-linux
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: true
          omitBody: true
          artifacts: "bot-linux-arm64.tar.gz"

  create-release-for-arm64-linux-old:
    needs: create-release-for-arm64-linux
    runs-on: ubuntu-22.04-arm
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install clang cmake ninja-build libstdc++-10-dev lld linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-22.04-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=arm64-linux-release -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build arm64_linux_cmake-release --parallel $(nproc)

      - name: Rename files
        run: |
          mv arm64_linux_cmake-release/bot bot-linux-arm64
          mv src/what-bot-arm64.service what-bot-arm64.service
          mv src/install-arm64.sh install-arm64.sh
          mv src/token.env token.env

      - name: Create arch spicific tarball
        run: |
          tar -czf bot-linux-arm64-old.tar.gz bot-linux-arm64 what-bot-arm64.service install-arm64.sh token.env

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "bot-linux-arm64-old.tar.gz"

      - name: Create release for arm64-linux-old
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: true
          omitBody: true
          artifacts: "bot-linux-arm64-old.tar.gz"

  create-release-for-x64-linux-old-old:
    needs: create-release-for-x64-linux
    runs-on: ubuntu-20.04
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install cmake ninja-build libstdc++-10-dev linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Install llvm from upstream
        run: |
          cd ${{ github.workspace }}/../
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh all
          sudo ln -s -f /usr/bin/clang-18 /usr/bin/clang
          sudo ln -s -f /usr/bin/clang++-18 /usr/bin/clang++

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-20.04-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=x64-linux-release -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build x64_linux_cmake-release --parallel $(nproc)

      - name: Rename files
        run: |
          mv x64_linux_cmake-release/bot bot-linux-x64
          mv src/what-bot-x64.service what-bot-x64.service
          mv src/install-x64.sh install-x64.sh
          mv src/token.env token.env

      - name: Create arch spicific tarball
        run: |
          tar -czf bot-linux-x64-old-old.tar.gz bot-linux-x64 what-bot-x64.service install-x64.sh token.env

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "bot-linux-x64-old-old.tar.gz"

      - name: Create release for x64-linux
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          omitBody: true
          artifacts: "bot-linux-x64-old-old.tar.gz"

  create-release-for-x64-linux-old:
    needs: create-release-for-x64-linux
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install cmake ninja-build libstdc++-10-dev linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Install llvm from upstream
        run: |
          cd ${{ github.workspace }}/../
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh all
          sudo ln -s -f /usr/bin/clang-18 /usr/bin/clang
          sudo ln -s -f /usr/bin/clang++-18 /usr/bin/clang++

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-22.04-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=x64-linux-release -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build x64_linux_cmake-release --parallel $(nproc)

      - name: Rename files
        run: |
          mv x64_linux_cmake-release/bot bot-linux-x64
          mv src/what-bot-x64.service what-bot-x64.service
          mv src/install-x64.sh install-x64.sh
          mv src/token.env token.env

      - name: Create arch spicific tarball
        run: |
          tar -czf bot-linux-x64-old.tar.gz bot-linux-x64 what-bot-x64.service install-x64.sh token.env

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "bot-linux-x64-old.tar.gz"

      - name: Create release for x64-linux
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          omitBody: true
          artifacts: "bot-linux-x64-old.tar.gz"

  add-general-assets-to-release:
    needs: [ create-release-for-x64-linux,
             create-release-for-arm64-linux,
             create-release-for-arm64-linux-old,
             create-release-for-x64-linux-old,
             create-release-for-x64-linux-old-old ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Create release for general assets and update to full release
        if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-rc')
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          bodyFile: "CHANGELOG.md"
          artifacts: "Install.md"
          makeLatest: true

      - name: Create release for general assets and update to rc release
        if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc')
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          bodyFile: "CHANGELOG.md"
          artifacts: "Install.md"
          prerelease: true