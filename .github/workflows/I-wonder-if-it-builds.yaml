name: I wonder if it builds

on:
  push:
    branches:
      - "**"

jobs:
  build-x64-linux-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null 
          sudo apt-get update -y 
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install clang cmake ninja-build libstdc++-10-dev lld linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=x64-linux-debug -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build x64_linux_cmake-debug --parallel $(nproc)

      - name: Upload build artifacts on success
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: x64-linux-debug-bin
          compression-level: 9
          path: x64_linux_cmake-debug/bot
          retention-days: 1

      - name: Upload build artifacts on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: x64-linux-debug-src
          compression-level: 9
          path: ${{github.workspace}}/**
          retention-days: 1
          include-hidden-files: true

  build-x64-linux-release-fast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null 
          sudo apt-get update -y 
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install clang cmake ninja-build libstdc++-10-dev lld linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=x64-linux-release -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build x64_linux_cmake-release --parallel $(nproc)

      - name: Upload build artifacts on success
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: x64-linux-release-fast-bin
          compression-level: 9
          path: x64_linux_cmake-release/bot
          retention-days: 1

      - name: Upload build artifacts on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: x64-linux-release-fast-src
          compression-level: 9
          path: ${{github.workspace}}/**
          retention-days: 1
          include-hidden-files: true

  build-x64-linux-release-size:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null 
          sudo apt-get update -y 
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install clang cmake ninja-build libstdc++-10-dev lld linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=x64-linux-minsize -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build x64_linux_cmake-minsize --parallel $(nproc)

      - name: Upload build artifacts on success
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: x64-linux-release-size-bin
          compression-level: 9
          path: x64_linux_cmake-minsize/bot
          retention-days: 1

      - name: Upload build artifacts on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: x64-linux-release-size-src
          compression-level: 9
          path: ${{github.workspace}}/**
          retention-days: 1
          include-hidden-files: true

  build-arm64-linux-release:
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install ca-certificates gpg wget -y
          test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null 
          sudo apt-get update -y 
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring -y
          sudo apt-get full-upgrade -y --autoremove --purge
          sudo apt-get -y install clang cmake ninja-build libstdc++-10-dev lld linux-libc-dev make build-essential curl zip unzip tar bash-completion pkg-config software-properties-common openssl libssl-dev

      - name: Define VCPKG_ROOT environment variable
        run: |
          cd ${{ github.workspace }}/../
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Define cache hash based on vcpkg.json
        run: |
          cd ${{ github.workspace }}
          CACHE_HASH=$(openssl dgst -sha256 vcpkg.json | awk '{print $2}')
          echo "CACHE_HASH=$CACHE_HASH" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{env.VCPKG_ROOT}}/**
          key: ${{ runner.os }}-${{ runner.arch }}-vcpkg-${{env.CACHE_HASH}}

      - name: Install vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/../
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
          echo "$VCPKG_ROOT" >> "$GITHUB_PATH"

      - name: Generate build files
        run: |
          cmake --preset=arm64-linux-release -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build arm64_linux_cmake-release --parallel $(nproc)

      - name: Upload build artifacts on success
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: arm64_linux-release-bin
          compression-level: 9
          path: arm64_linux_cmake-release/bot
          retention-days: 1

      - name: Upload build artifacts on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: arm64_linux-release-src
          compression-level: 9
          path: ${{github.workspace}}/**
          retention-days: 1
          include-hidden-files: true